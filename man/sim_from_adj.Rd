% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SIM.R
\name{sim_from_adj}
\alias{sim_from_adj}
\title{Simulate data from graph}
\usage{
sim_from_adj(G, n, m = 1, sim, OutGroup = NULL)
}
\arguments{
\item{G}{A weighted adjecency matrix of a graph. This must be an upper
triangular matrix, whith zeros in the diagonal. The value of \code{G[i,j]}
is multiplied with variable \code{i} to form variable \code{j}. Hence a
non-zero values in \code{G[i,j]} indicates an arrow from variable \code{i}
to variable \code{j} in the graph and the value indicates weight.}

\item{n}{number of individuals.}

\item{m}{number of observations for each individual. If not specified taken
to be 1.}

\item{sim}{a list or vector of strings of length shorter then or equal to the
  number of columns in \code{G}. If \code{sim} has length shorter then number
  of \code{G} columns then the last entry of \code{sim} will be repeated
  until \code{sim} has the same length as \code{G} has columns.

  Each entry of \code{sim} may contain a \code{BETA} and an \code{N}, where
  \code{BETA} is the linear combination of the parent variables found via
  \code{G} and \code{N} is length the \code{sim} function should be.}

\item{OutGroup}{If \code{NULL} the function will retun a single data frame
with all the simulated data. Otherwise \code{OutGroup} must be a list,
where each list entry is vector of indicies. The indicies must correspond
to either the names og column number in the graph matrix \code{G}. If this
is the case, then the output of the function is a list of data frames of
the simulated data split based on \code{OutGroup}.}
}
\value{
A data frame  or list of data frames with a column for each column in
  the adjecency matrix \code{G}. If \code{m} is larger then 1 then there will
  also be columns for time and id.
}
\description{
Simulate data from a graph.
}
\details{
This function is designed a bit ad hoc to make simulations a bit easier. It
might not survive to a publication of the code.
}
\examples{
### A simple example ========================================================

# make a graph
G <- matrix(c(0,0,3,0), ncol = 2, dimnames = list(NULL, c("X", "Y")))

# specify distributions
sim <- c("rbinom(N, 3, 0.4)", "rnorm(N, BETA, 1)")

# simualte
SIM <- sim_from_adj(G, n = 100, sim)

# ---------------------------------------------------------------------------


### A more advanced example =================================================

# make graph
G <- matrix(c(0,0,1,3,0,0,
              0,0,0,0,1,0,
              0,0,0,0,0,1,
              0,0,0,0,0,3,
              0,0,0,0,0,0,
              0,0,0,0,0,0), ncol = 6, byrow = T,
              dimnames = list(NULL, c("E1","E2","X1","X2","X3","Y")))

# specify grouping in output
out <- list(E = 1:2, X = 3:5, Y = 6)

# specify distributions
sim <- c("rbinom(N, 3, 0.3)", "rbinom(N,1, 0.2)",
         "rnorm(N, BETA, 1)", "rpois(N, exp(BETA))", "rnorm(N, BETA, 0.3)",
         "rpois(N, exp(BETA))")

# simulate
SIM <- sim_from_adj(G, n = 100, sim, out)

# ---------------------------------------------------------------------------

}
